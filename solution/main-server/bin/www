#!/usr/bin/env node
require('module-alias/register')

const app = require('@root/app')
const debug = require('debug')('main-server:server')
const http = require('http')

const { Server } = require('socket.io');
const setupChat = require('@services/chat/chat');

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

const io = new Server(server);
setupChat(io);

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind)
}

function onError(error) {
  if (error.syscall !== 'listen')
    throw error;

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function normalizePort(val) {
  const port = parseInt(val, 10)

  // named pipe
  if (isNaN(port))
    return val

  // port number
  if (port >= 0)
    return port

  return false
}



